编写测试用例：功能、UI、易用性、性能、安全、兼容性、可移植
Ui
文本：字体、字号、颜色、间距、位置
图片：显示比例
输入框：长度、高度、背景文字颜色
按钮：背景颜色、字体、大小颜色间距

兼容性：
不同浏览器、不同版本浏览器、不同移动设备、不同分辨率

安全性：
密码存储、传输加密，复制粘贴
sql注入、多终端登录、多浏览器登录

用例设计方法：
1.等价类与边界值
	有无效等价类和有效等价类
2. 场景法
 基本流：是经过用例的最简单的路径（无任何差错，程序从开始直接执行到结束）

    备选流：一个备选流可能从基本流开始，在某个特定条件下执行，然后重新加入基本流中，也可以起源于另一个备选流，或终止用例，不在加入到基本流中；（各种错误情况）

前端的工作：实现整一个前端页面以及交互逻辑，以及利用ajax与nodejs服务器（中间层)交互

后端的工作：提供API接口，与数据库交互

引入nodejs主要是为了分层开发，职责划分，nodejs作为前端服务器，由前端开发人员负责，前端开发人员不需要知道java后台是如何实现的，也不需要知道API接口是如何实现的，我们只需要关心我们前端的开发工作，并且管理好nodejs前端服务器，而后台开发人员也不需要考虑如何前端是如何部署的，他只需要做好自己擅长的部分，提供好API接口就可以；

nodejs本身有着独特的异步、非阻塞I/O的特点，这也就意味着他特别适合I/O密集型操作，在处理并发量比较大的请求上能力比较强，因此，利用它来充当前端服务器，向客户端提供静态文件以及响应客户端的请求，我觉得这是一个很不错的选择。

vue MVVM model view viewmodel

sql trigger
Inserted表和Deleted表
rollback
优点
保证某些数据的正确性，把一些逻辑放在服务器上，特别对于历史数据某些需要维护的，可能会比较方便
缺点
一般会带来多一次的i/o,每次对应的事件，数据库都会去检索是否符合条件，如果符合，执行。效率可能会比较慢一些，

索引就是加快检索表中数据的方法, 索引允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库

二、索引的特点
    1.索引可以加快数据库的检索速度
    2.索引降低了数据库插入、修改、删除等维护任务的速度
    3.索引创建在表上，不能创建在视图上
    4.索引既可以直接创建，也可以间接创建
    5.可以在优化隐藏中，使用索引
    6.使用查询<nobr>处理器</nobr>执行SQL语句，在一个表上，一次只能使用一个索引
    7.其他

三、索引的优点
    1.创建唯一性索引，保证数据库表中每一行数据的唯一性
    2.大大加快数据的检索速度，这也是创建索引的最主要的原因
    3.加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。
    4.在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。
    5.通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能。

四、索引的缺点
    1.创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加
    2.索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大
    3.当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度

五、索引分类
    1.直接创建索引和间接创建索引
    直接创建索引： CREATE INDEX mycolumn_index ON mytable (myclumn)
    间接创建索引：定义主键约束或者唯一性键约束，可以间接创建索引
    2.普通索引和唯一性索引
    普通索引：CREATE INDEX mycolumn_index ON mytable (myclumn)
    唯一性索引：保证在索引列中的全部数据是唯一的，对聚簇索引和非聚簇索引都可以使用
    CREATE UNIQUE COUSTERED INDEX myclumn_cindex ON mytable(mycolumn)
    3.单个索引和复合索引
    单个索引：即非复合索引
    复合索引：又叫组合索引，在索引建立语句中同时包含多个字段名，最多16个字段
    CREATE INDEX name_index ON username(firstname,lastname)
    4.聚簇索引和非聚簇索引(聚集索引，群集索引)
   聚簇索引：物理索引，与基表的物理顺序相同，数据值的顺序总是按照顺序排列
    CREATE CLUSTERED INDEX mycolumn_cindex ON mytable(mycolumn) WITH
    ALLOW_DUP_ROW(允许有重复记录的聚簇索引)
   非聚簇索引：CREATE UNCLUSTERED INDEX mycolumn_cindex ON mytable(mycolumn)
六、索引的使用
   1.当字段数据更新频率较低，查询使用频率较高并且存在大量重复值是建议使用聚簇索引
    2.经常同时存取多列，且每列都含有重复值可考虑建立组合索引

request.get(url,param参数，headers)